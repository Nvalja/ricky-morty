{"version":3,"sources":["api/api.js","api/characters.js","components/Characters/CharacterCard/CharacterCard.jsx","components/Characters/CharacterSearch/CharacterSearch.jsx","components/Characters/Characters.jsx","api/episodes.js","components/Episodes/Episodes.jsx","components/Locations.jsx","components/MyWatchList.jsx","App.jsx","index.js"],"names":["request","url","a","fetch","response","ok","Error","status","statusText","json","getCharacters","page","species","gender","result","useStyles","makeStyles","root","width","height","textAlign","position","image","link","display","overflow","top","left","zIndex","border","backgroundColor","CharacterCard","name","classes","React","useState","open","setOpen","ClickAwayListener","onClickAway","Card","className","CardActionArea","onClick","prev","CardMedia","title","CardContent","Typography","gutterBottom","variant","component","color","defaultProps","theme","margin","spacing","minWidth","CharacterSearch","getStateSelect","Grid","container","justify","FormControl","InputLabel","htmlFor","Select","native","onChange","label","inputProps","id","aria-label","value","justifyContent","Characters","characters","setCharacters","selectedPage","setSelectedPage","countPages","setCountPages","selectedState","setSelectedState","loadingError","setLoadingError","useEffect","loadCharacters","loadedCharacters","results","Math","ceil","info","count","Container","target","Pagination","size","event","newValue","map","character","item","getEpisodes","table","Episodes","episodes","setEpisodes","loadEpisodes","loadedEpisodes","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","episod","episode","air_date","Locations","MyWatchList","App","selectedTab","setSelectedTab","AppBar","Tabs","centered","Tab","to","Link","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8364118c.chunk.js","sourcesContent":["const BASE_URL = 'https://rickandmortyapi.com/api';\n\nexport const request = async(url) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status}---${response.statusText}`);\n    }\n\n    return response.json();\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { request } from './api';\n\nexport const getCharacters = async(page, status, species, gender) => {\n  const result = await request(\n    `/character/?${page}&status=${status}&species=${species}&gender=${gender}`,\n  );\n\n  return result;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 200,\n    height: 350,\n    textAlign: 'center',\n    position: 'relative',\n  },\n  image: {\n    height: 200,\n  },\n  link: {\n    position: 'absolute',\n    display: 'block',\n    overflow: 'hidden',\n    width: 200,\n    height: 200,\n    top: '200px',\n    left: 0,\n    zIndex: 1,\n    border: '1px solid',\n    backgroundColor: 'green',\n  },\n\n});\n\nexport const CharacterCard = ({ name, image, status, species }) => {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(prev => !prev);\n  };\n\n  const handleClickAway = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Card className={classes.root}>\n        <CardActionArea onClick={handleClick}>\n          {open ? (\n            <div className={classes.link}>\n              Click me, I will stay visible until you click outside.\n            </div>\n          ) : null}\n          <CardMedia\n            className={classes.image}\n            image={image}\n            title=\"characters picture\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {species}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n\n    </ClickAwayListener>\n  );\n};\n\nCharacterCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  image: PropTypes.string,\n  status: PropTypes.string.isRequired,\n  species: PropTypes.string.isRequired,\n};\n\nCharacterCard.defaultProps = {\n  image: '',\n};\n","import React from 'react';\nimport ProrTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(2),\n    minWidth: 300,\n  },\n}));\n\nexport const CharacterSearch = ({ getStateSelect }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container justify=\"center\">\n      <FormControl variant=\"outlined\" className={classes.root}>\n        <InputLabel htmlFor=\"outlined-status-native-simple\">Status</InputLabel>\n        <Select\n          native\n          onChange={getStateSelect}\n          label=\"Status\"\n          inputProps={{\n            name: 'status',\n            id: 'outlined-status-native-simple',\n          }}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          <option value=\"all\">All</option>\n          <option value=\"alive\">Alive</option>\n          <option value=\"dead\">Dead</option>\n          <option value=\"unknown\">Unknown</option>\n        </Select>\n      </FormControl>\n\n      <FormControl variant=\"outlined\" className={classes.root}>\n        <InputLabel\n          htmlFor=\"outlined-species-native-simple\"\n        >\n          Species\n        </InputLabel>\n        <Select\n          native\n          onChange={getStateSelect}\n          label=\"Species\"\n          inputProps={{\n            name: 'species',\n            id: 'outlined-species-native-simple',\n          }}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          <option value=\"all\">All</option>\n          <option value=\"human\">Human</option>\n          <option value=\"animal\">Animal</option>\n          <option value=\"alien\">Alien</option>\n          <option value=\"disease\">Disease</option>\n          <option value=\"robot\">Robot</option>\n          <option value=\"cronenberg\">Cronenberg</option>\n          <option value=\"humanoid\">Humanoid</option>\n          <option value=\"poopybutthole\">Poopybutthole</option>\n          <option value=\"unknown\">Unknown</option>\n        </Select>\n      </FormControl>\n\n      <FormControl variant=\"outlined\" className={classes.root}>\n        <InputLabel htmlFor=\"outlined-gender-native-simple\">Gender</InputLabel>\n        <Select\n          native\n          onChange={getStateSelect}\n          label=\"Gender\"\n          inputProps={{\n            name: 'gender',\n            id: 'outlined-gender-native-simple',\n          }}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          <option value=\"all\">All</option>\n          <option value=\"female\">Female</option>\n          <option value=\"male\">Male</option>\n          <option value=\"genderless\">Genderless</option>\n          <option value=\"unknown\">Unknown</option>\n        </Select>\n      </FormControl>\n    </Grid>\n  );\n};\n\nCharacterSearch.propTypes = {\n  getStateSelect: ProrTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Container } from '@material-ui/core';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getCharacters } from '../../api/characters';\nimport { CharacterCard } from './CharacterCard/CharacterCard';\nimport { CharacterSearch } from './CharacterSearch/CharacterSearch';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n\nexport const Characters = () => {\n  const [characters, setCharacters] = useState([]);\n  const [selectedPage, setSelectedPage] = useState(1);\n  const [countPages, setCountPages] = useState(1);\n  const [selectedState, setSelectedState] = useState('');\n  const [loadingError, setLoadingError] = useState(false);\n\n  const handleChange = (event, newValue) => {\n    setSelectedPage(newValue);\n  };\n\n  const handleStateSelect = ({ target }) => {\n    let { value } = target;\n    const { name } = target;\n\n    if (value === 'all') {\n      value = '';\n    }\n\n    setSelectedState({\n      ...selectedState,\n      [name]: value,\n    });\n  };\n\n  useEffect(() => {\n    loadCharacters();\n  }, [selectedPage, selectedState]);\n\n  const loadCharacters = async() => {\n    setLoadingError(false);\n    try {\n      const { status, species, gender } = selectedState;\n      const loadedCharacters = await getCharacters(\n        `page=${selectedPage}`,\n        status || '',\n        species || '',\n        gender || '',\n      );\n\n      setCharacters(loadedCharacters.results);\n      setCountPages(Math.ceil(loadedCharacters.info.count / 20));\n    } catch (error) {\n      setLoadingError(true);\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n\n    <Container>\n      <CharacterSearch getStateSelect={handleStateSelect} />\n      <Pagination\n        className={classes.root}\n        count={countPages}\n        size=\"large\"\n        onChange={handleChange}\n      />\n      <Grid container justify=\"center\" spacing={3}>\n        {characters.map(character => (\n          <Grid item key={character.id}>\n            {!loadingError\n              ? <CharacterCard {...character} />\n              : <p>Character is unfounded</p>\n            }\n          </Grid>\n        ))}\n      </Grid>\n\n    </Container>\n  );\n};\n","import { request } from './api';\n\nexport const getEpisodes = async(page) => {\n  const result = await request(\n    `/episode/?${page}`,\n  );\n\n  return result;\n};\n","import React, { useEffect, useState } from 'react';\nimport Pagination from '@material-ui/lab/Pagination';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container, Paper } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { getEpisodes } from '../../api/episodes';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  table: {\n    minWidth: 10,\n  },\n});\n\nexport const Episodes = () => {\n  const [episodes, setEpisodes] = useState([]);\n  const [countPages, setCountPages] = useState(1);\n  const [selectedPage, setSelectedPage] = useState(1);\n\n  const handleChange = (event, newValue) => {\n    setSelectedPage(newValue);\n  };\n\n  useEffect(() => {\n    loadEpisodes();\n  }, [selectedPage]);\n\n  const loadEpisodes = async() => {\n    const loadedEpisodes = await getEpisodes(`page=${selectedPage}`);\n\n    setEpisodes(loadedEpisodes.results);\n    setCountPages(Math.ceil(loadedEpisodes.info.count / 20));\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <Pagination\n        className={classes.root}\n        count={countPages}\n        size=\"large\"\n        onChange={handleChange}\n      />\n      <TableContainer component={Paper}>\n        <Table\n          className={classes.table}\n          size=\"large\"\n          aria-label=\"a dense table\"\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"left\">Name</TableCell>\n              <TableCell align=\"center\">Episode</TableCell>\n              <TableCell align=\"right\">Date</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {episodes.map(episod => (\n              <TableRow key={episod.id}>\n                <TableCell align=\"left\">{episod.name}</TableCell>\n                <TableCell align=\"center\">{episod.episode}</TableCell>\n                <TableCell align=\"right\">{episod.air_date}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import React from 'react';\n\nexport const Locations = () => (<div>333333</div>);\n","import React from 'react';\n\nexport const MyWatchList = () => (<div>4444</div>);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\nimport { Route, Switch, Redirect, Link } from 'react-router-dom';\nimport { Characters } from './components/Characters/Characters';\nimport { Episodes } from './components/Episodes/Episodes';\nimport { Locations } from './components/Locations';\nimport { MyWatchList } from './components/MyWatchList';\n\nexport const App = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setSelectedTab(newValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          aria-label=\"simple tabs example\"\n          centered\n        >\n          <Tab label=\"Characters\" to=\"/\" component={Link} />\n          <Tab label=\"Episodes\" to=\"/episodes\" component={Link} />\n          <Tab label=\"Locations\" to=\"/location\" component={Link} />\n          <Tab label=\"My watch list\" to=\"/myWatchList\" component={Link} />\n        </Tabs>\n      </AppBar>\n\n      <Switch>\n        <Route path=\"/\" exact component={Characters} />\n        <Route path=\"/episodes\" component={Episodes} />\n        <Route path=\"/location\" component={Locations} />\n        <Route path=\"/myWatchList\" component={MyWatchList} />\n\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}